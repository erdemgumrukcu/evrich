stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

# .default_rules:
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main" 

build-traffic:
  # image: $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/traffic
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/traffic:latest -t $CI_REGISTRY_IMAGE/traffic:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/traffic:latest
    - docker push $CI_REGISTRY_IMAGE/traffic:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - /external/traffic/**
    
  


build-aggregator:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/aggregator:latest -t $CI_REGISTRY_IMAGE/aggregator:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/aggregator:latest
    - docker push $CI_REGISTRY_IMAGE/aggregator:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - external/aggregator/**

# XXX should this even be build here or should this be the stock datafev image?
build-datafev:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/datafev:latest -t $CI_REGISTRY_IMAGE/datafev:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/datafev:latest
    - docker push $CI_REGISTRY_IMAGE/datafev:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - external/datafev/**

build-event_manager:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/event_manager:latest -t $CI_REGISTRY_IMAGE/event_manager:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/event_manager:latest
    - docker push $CI_REGISTRY_IMAGE/event_manager:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - external/event_manager/**


build-coordinator:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/coordinator
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/coordinator:latest -t $CI_REGISTRY_IMAGE/coordinator:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/coordinator:latest
    - docker push $CI_REGISTRY_IMAGE/coordinator:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - sogno/coordinator/**
    
build-connector:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/connector
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/connector:latest -t $CI_REGISTRY_IMAGE/connector:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/connector:latest
    - docker push $CI_REGISTRY_IMAGE/connector:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - sogno/connector/**

build-routing:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/optimizer
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/routing:latest -t $CI_REGISTRY_IMAGE/routing:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/routing:latest
    - docker push $CI_REGISTRY_IMAGE/routing:$VERSION
  tags:
    - docker
  rules:
    - changes: 
      - sogno/optimizer/**

build-api:       # This job runs in the build stage, which runs first.
  # image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/api
    - source build.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/api:latest -t $CI_REGISTRY_IMAGE/api:$VERSION -f ./Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/api:latest
    - docker push $CI_REGISTRY_IMAGE/api:$VERSION
  tags:
    - docker
  rules:
  - changes: 
    - sogno/api/**



# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
