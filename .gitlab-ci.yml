variables:
  - DOCKER_BUILD_IMAGE:  ubuntu

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

.default_rules:
  rules:
    - if: $CI_COMMIT_BRANCH == "1-create-deployment-pipeline" 

build-traffic:
  image: $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/traffic
    - echo $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/traffic:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/traffic:latest

build-aggregator-1:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator1
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/aggregator1:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/aggregator1:latest

build-aggregator-2:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator2
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/aggregator2:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/aggregator2:latest

build-aggregator-3:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd external/aggregator3
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/aggregator3:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/aggregator3:latest
    
build-connector:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/connector
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/connector:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/connector:latest

build-routing:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/optimization
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/routing:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/routing:latest

build-api:       # This job runs in the build stage, which runs first.
  image:  $DOCKER_BUILD_IMAGE
  stage: build
  script:
    - cd sogno/serviceapi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/evrich/api:latest ./Dockerfile
    - docker push $CI_REGISTRY_IMAGE/evrich/api:latest



# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
